datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String          @id @unique @default(cuid())
  name                    String?
  email                   String?         @unique
  emailVerified           DateTime?
  image                   String?
  accounts                Account[]
  sessions                Session[]
  user                    Friends[]       @relation("user")
  friends                 Friends[]       @relation("friend")
  incommingFriendRequests FriendRequest[] @relation("sent")
  outgoingFriendRequests  FriendRequest[] @relation("received")
  chats                   Chat[]
  chatFriend                   Chat[] @relation("friend")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FriendRequest {
  fromId    String
  toId      String
  accepted  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  from      User     @relation("sent", fields: [fromId], references: [id])
  to        User     @relation("received", fields: [toId], references: [id])

  @@unique([fromId, toId])
  @@unique([toId, fromId])
}

model Friends {
  friendId String
  friend   User   @relation("friend", fields: [friendId], references: [id])
  userId   String
  user     User   @relation("user", fields: [userId], references: [id])

  @@unique([userId, friendId])
  @@unique([friendId, userId])
}

model Chat {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  messages      Message[]
  sender        String
  receiver      String
  chatBelongsTo User      @relation(fields: [sender], references: [id])
  chatBelongsToOther User      @relation("friend",fields: [receiver], references: [id])

  @@unique([sender, receiver])
  @@unique([receiver, sender])
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  type   String @default("message")
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  senderId  String
}
